{"version":3,"sources":["logo.svg","components/logo.svg","components/menu.js","components/navbar.js","components/hello.js","components/works.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","className","style","display","this","props","marginTop","margin","href","to","React","Component","Clock","state","date","Date","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","Navbar","menuClick","wrapperRef","current","classList","toggle","color","bars","icon","faTimes","faBars","createRef","ref","right","left","src","logo","height","alt","loading","id","position","onClick","backgroundColor","Hello","opacity","translateY","delay","e","i","Works","Fullpage","licenseKey","scrollingSpeed","scrollOverflow","navigation","render","fullpageApi","Wrapper","moveSectionUp","moveSectionDown","silentMoveTo","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7dc9304.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.99b8cb18.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.99b8cb18.svg\";","import React from 'react';\r\nimport './Menu.css';\r\nimport {BrowserRouter as Router , Link} from \"react-router-dom\";\r\n\r\n\r\nclass Menu extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Menu\" style={{display:this.props.display, marginTop:this.props.margin}}>\r\n                <div className=\"menuli\">\r\n                    <ul>\r\n                        <Router>\r\n                        <li href=\"#page1\"><Link to=\"/\">HOME</Link></li>\r\n                        <li><Link to=\"/works\">WORKS</Link></li>\r\n                        <li><Link to=\"/about\">ABOUT</Link></li>\r\n                        <li><Link to=\"/contact\">CONTACT</Link></li>\r\n                        </Router>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Menu;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport Menu from './menu.js';\r\n\r\nimport { faBars,faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nclass Clock extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {date:new Date()};\r\n    }\r\n    componentDidMount(){\r\n        this.timerID = setInterval(() => this.tick(),1000)\r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this.timerID);\r\n    }\r\n    tick(){\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <div>{this.state.date.toLocaleTimeString()}</div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Navbar extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            display:\"none\",\r\n            margin:\"-100%\",\r\n            color:\"#E94560\",\r\n            bars:\"#fff\",\r\n            icon: faBars,\r\n        }\r\n        this.wrapperRef=React.createRef();\r\n    }\r\n    menuClick = () =>{\r\n        const wrapper = this.wrapperRef.current;\r\n        wrapper.classList.toggle('is-nav-open');\r\n        if (this.state.display === \"none\") {\r\n            this.setState({\r\n                display:\"block\",\r\n                color:\"#fff\",\r\n                bars:\"#0F3460\",\r\n                icon: faTimes ,\r\n            });   \r\n        }\r\n        else{\r\n            this.setState({\r\n                display:\"none\",\r\n                color:\"#E94560\",\r\n                bars:\"#fff\",\r\n                icon: faBars , \r\n            });\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n            <div className=\"menuWrapper\" ref={this.wrapperRef}><Menu /></div>\r\n            <nav className=\"navbar navbar-light position-absolute\" style={{right:0,left:0}}>\r\n                <a className=\"navbar-brand\" href=\"#\">\r\n                    <img src={logo} height=\"30\" className=\"logo d-inline-block align-top\" alt=\"\" loading=\"lazy\"/>\r\n                    <span className=\"brand\">INSOMVERT</span>\r\n                </a>\r\n                <div id=\"ticking\" style={{position:\"absolute\",color:\"#fff\",left:\"50%\"}}>\r\n                    <Clock />\r\n                </div>\r\n                <button className=\"menu navbar-toggler\" onClick={this.menuClick} style={{backgroundColor:this.state.color , color:this.state.bars}}>\r\n                    <FontAwesomeIcon icon={this.state.icon} />\r\n                </button>\r\n            </nav>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport './Hello.css';\r\nimport Anime from 'react-anime';\r\nconst Hello = () => {\r\n    return(\r\n        <div>\r\n            <Anime \r\n            opacity={[0,1]} \r\n            translateY={'1em'} \r\n            delay={(e,i) => i * 400}\r\n            >  \r\n                <span className=\"hello\">hello</span>\r\n                <span className=\"im\">I'm <span className=\"vert\">INSOMVERT</span></span>\r\n                <div className=\"line\"></div>\r\n                <p className=\"txt\">graphic designer and<br/>web developer</p>\r\n                <button className=\"cta\"><span>Let's Talk</span></button>\r\n            </Anime>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hello;\r\n\r\n//","import React from 'react';\r\nimport './Hello.css';\r\nimport {Anime, stagger} from 'react-anime';\r\n\r\nconst Box = ({ children }) => {\r\n    return (\r\n      <div id=\"Box\" style={{ height: 50, width: 50, background: \"#d3d\" }}>\r\n        {children}\r\n      </div>\r\n    );\r\n  };\r\nconst Works = () => {\r\n    return(\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Works;","import React from 'react';\nimport logo from './logo.svg';\nimport Navbar from './components/navbar.js';\nimport Hello from './components/hello.js';\nimport Works from './components/works.js';\nimport ReactFullpage from '@fullpage/react-fullpage';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch, Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return(\n    \n    <div>\n      <Navbar/>\n      <div  className=\"App\">\n      <Fullpage/>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n    </div>\n    \n  );\n}\n\nconst Fullpage = () => (\n  <ReactFullpage\n    licenseKey={'FREE'}\n    scrollingSpeed={1000}\n    scrollOverflow={true}\n    navigation={true}\n\n\n    render={({state,fullpageApi}) => {\n      return(\n        <ReactFullpage.Wrapper>\n          <div className=\"section\">\n            <Hello/>\n          </div>\n          <div className=\"section\">\n            <Works/>\n          </div>\n          <div className=\"section\">\n            <div className=\"slide\">\n            <p style={{color:\"#fff\"}}>Section 2 slide 1</p>\n            </div>\n            <div className=\"slide\">\n            <button onClick={() => fullpageApi.moveSectionUp()}>move up</button>\n            <button onClick={() => fullpageApi.moveSectionDown()}>move down</button>\n            </div>\n          </div>\n          <div className=\"section\">\n            <p style={{color:\"#fff\"}}>3</p>\n            <button onClick={() => fullpageApi.silentMoveTo(1,1)}>move to first</button>\n          </div>\n          \n        </ReactFullpage.Wrapper>\n      );\n    }}\n  />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './components/Navbar.css';\n\n\n\nReactDOM.render(\n  <StrictMode>\n    <App/>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}